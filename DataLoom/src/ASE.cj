package DataLoom
// 先导入所需的标准库
import std.console.*
import std.convert.*
import std.collection.*
import std.sort.*
import std.math.*
import std.io.*
import std.fs.*

var sbox: ArrayList<UInt8> = ArrayList<UInt8>(
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9,
        0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f,
        0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07,
        0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3,
        0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
        0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3,
        0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f,
        0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
        0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac,
        0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a,
        0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
        0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
        0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16])
var inv_sbox: ArrayList<UInt8> = ArrayList<UInt8>(
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39,
        0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2,
        0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76,
        0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc,
        0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d,
        0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c,
        0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f,
        0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
        0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62,
        0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd,
        0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,
        0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6,
        0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d])
//使用 sbox 对 state 中每个字节进行替换（非线性变换）
public func SubBytes(state: ArrayList<UInt8>) {
    for (i in 0..16) {
        state[i] = sbox[Int64(state[i])]
    }
}
//使用 inv_sbox 对 state 中每个字节进行反替换（逆操作）
public func InvSubBytes(state: ArrayList<UInt8>) {
    for (i in 0..16) {
        state[i] = inv_sbox[Int64(state[i])]
    }
}
//实现 AES 中的行移位（Row Shift）变换，
public func ShiftRows(state: ArrayList<UInt8>) {
    var tmp: ArrayList<UInt8> = ArrayList<UInt8>([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    tmp[0] = state[0]
    tmp[4] = state[4]
    tmp[8] = state[8]
    tmp[12] = state[12]
    tmp[1] = state[5]
    tmp[5] = state[9]
    tmp[9] = state[13]
    tmp[13] = state[1]
    tmp[2] = state[10]
    tmp[6] = state[14]
    tmp[10] = state[2]
    tmp[14] = state[6]
    tmp[3] = state[15]
    tmp[7] = state[3]
    tmp[11] = state[7]
    tmp[15] = state[11]
    for (i in 0..16) {
        state[i] = tmp[i]
    }
}

var key: ArrayList<UInt8> = ArrayList<UInt8>(
    [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])
//：行移位的逆操作，配合 ShiftRows 还原原始排列。
public func InvShiftRows(state: ArrayList<UInt8>) {
    var tmp: ArrayList<UInt8> = ArrayList<UInt8>([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    tmp[0] = state[0]
    tmp[4] = state[4]
    tmp[8] = state[8]
    tmp[12] = state[12]

    tmp[5] = state[1]
    tmp[9] = state[5]
    tmp[13] = state[9]
    tmp[1] = state[13]

    tmp[10] = state[2]
    tmp[14] = state[6]
    tmp[2] = state[10]
    tmp[6] = state[14]
    tmp[15] = state[3]
    tmp[3] = state[7]
    tmp[7] = state[11]
    tmp[11] = state[15]
    for (i in 0..16) {
        state[i] = tmp[i]
    }
}
//将 state 中的每个字节与对应的 roundkey 字节进行异或运算。
public func AddRoundKey(state: ArrayList<UInt8>, roundkey: ArrayList<UInt8>) {
    for (i in 0..16) {
        state[i] = state[i] ^ roundkey[i]
    }
}
//加密一个16字节的块
public func Encrypt(state: ArrayList<UInt8>, roundkey: ArrayList<UInt8>) {
    // println("this size is ${state.size}")
    AddRoundKey(state, roundkey)
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, roundkey)
}
//解密一个16字节的块
public func DecryptBlock(state: ArrayList<UInt8>, roundkey: ArrayList<UInt8>) {
    AddRoundKey(state, roundkey)
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, roundkey)
}
//对明文添加填充，使其长度成为 blockSize（这里是 16）的整数倍。
public func PKCS7Padding(data: ArrayList<UInt8>, blockSize: Int64) {
    var paddingLength: Int64 = blockSize - (data.size % blockSize)
    for (i in 0..paddingLength) {
        data.append(UInt8(paddingLength))
    }
}
//去除填充。
public func PKCS7Unpadding(data: ArrayList<UInt8>, blockSizef: Int64) {
    if (data.isEmpty()) {
        return
    }
    var padding = data[data.size - 1]
    var x: Int64 = Int64(padding)
    if (padding > 0 && padding <= 16) {
        for (i in 0..x) {
            if (data[data.size - 1 - i] != padding) {
                return
            }
        }
        while (data.size > (16 - x)) {
            data.remove(data.size - 1)
        }
    }
}

// 简单XOR加密
public func simpleXOREncrypt(message: String, key: Array<UInt8>): Array<UInt8> {
    var bytes: Array<UInt8> = Array<UInt8>(message.size, item: 0u8)
    for (i in 0..message.size) {
        let char = message[i]
        bytes[i] = UInt8(char) ^ key[i % key.size]
    }
    return bytes
}

// 简单XOR解密
public func simpleXORDecrypt(data: Array<UInt8>, key: Array<UInt8>): String {
    var decrypted = ""
    for (i in 0..data.size) {
        let byte = data[i]
        decrypted += Rune(byte ^ key[i % key.size]).toString()
    }
    return decrypted
}


func ASE_decode(s: String):String {
    var t2 = s.split(' ')
    var x: ArrayList<UInt8> = ArrayList<UInt8>(t2.size)
    for (i in t2) {
        x.append(UInt8.parse(i))
    }
    var s1: String = ""
    while (x.size != 0) {
        var st: ArrayList<UInt8> = ArrayList<UInt8>()
        while (st.size != 16) {
            st.append(x[0])
            x.remove(0)
        }
        DecryptBlock(st, key)
        PKCS7Unpadding(st, 16)
        s1 = s1 + PrintHex(st)
    }
    return s1
    // println("解密后的结果:${s1}")
}

func ASE_encrypt(s: String) {
    var t1 = s.toArray()
    var x: ArrayList<UInt8> = ArrayList<UInt8>(t1.size)
    for (i in s) {
        x.append(i)
    }
    var s1: String = ""
    //这个地方是能正确填充16位的
    PKCS7Padding(x, 16)
    println("加密后数据为:")
    while (x.size != 0) {
        var x1: ArrayList<UInt8> = ArrayList<UInt8>()
        for (i in 0..16) {
            x1.append(x[0])
            x.remove(0)
        }
        Encrypt(x1, key)
        for (i in x1) {
            print(i)
            print(" ")
        }
    }
    print("\n")
}
//用于输出信息
func PrintHex(data: ArrayList<UInt8>):String {
    var s = ""
    for (i in 0..data.size) {
        s += Rune(data[i]).toString()
    }
    print(s)
    print("\n")
    return s
}
func encrypt(message: String) {
    // 创建哈夫曼树并打印编码
    let (huffmanTree, codes, n) = createHuffmanTreeFromString(message)

    // 打印计算出的哈夫曼编码
    printHuffmanCodes(huffmanTree, codes, n)

    // 对消息进行哈夫曼编码并输出
    let encodedMessage = encodeMessage(message, huffmanTree, codes, n)
    println("哈夫曼编码后的消息: ${encodedMessage}")
    ASE_encrypt(encodedMessage)

    // 将哈夫曼编码表和编码后的消息写入文件
    writeHuffmanCodesToFile(huffmanTree, codes, n)

    // 增加哈夫曼树序号并保存到配置文件
    treeSequenceNumber += 1
    storeTreeSequenceToConfig()
    println("哈夫曼树序号已更新为: ${treeSequenceNumber}")
    println("程序执行完毕")
}